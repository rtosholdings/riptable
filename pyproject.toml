# NOTE: you have to use single-quoted strings in TOML for regular expressions.
# It's the equivalent of r-strings in Python.  Multiline strings are treated as
# verbose regular expressions by Black.  Use [ ] to denote a significant space
# character.

[tool.black]
line-length = 120
target-version = ["py38", "py39", "py310"]
exclude = '''
/(
  \.cache
  | \.egg
  | \.git
  | \.hypothesis
  | \.idea
  | \.ionide
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.venv
  | \.vs
  | \.vscode
  | _build
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
xfail_strict = true

[tool.pydocstyle]
convention = "numpy"
add_ignore = "D1,D2,D300,D400,D401,D403,D404,D405,D418,D419"

[tool.validate_docstrings]
#errors = "GL"
not_errors = "ES01,EX01,EX96,GL01,GL02,GL03,GL05,GL08,GL09,GL10,GL97,GL99,PR05,PR06,PR08,PR09,PR10,RT01,RT04,RT05,SA01,SA02,SA03,SA04,SS01,SS02,SS03,SS04,SS05,SS06"
flake8_errors = "E9,F63,F7,F82"
#format = "json"

[tool.coverage.run]
branch = true
source = ["riptable"]
omit = [
    "riptable/benchmarks/*",
    "riptable/tests/*",
    "riptable/testing/*",
    "riptable/hypothesis_tests/*",
    "riptable/test_tooling_integration/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "raise RuntimeError\\(\"NotImplemented\"\\)",
    "if TYPE_CHECKING:",
    "\\.\\.\\.",
    "pass",
]

# ruff is a Python linter implemented in Rust: https://github.com/charliermarsh/ruff
[tool.ruff]
line-length = 120

# Rule categories (or individual rules) to enable.
# https://beta.ruff.rs/docs/rules
select = [
  "B",      # flake8-bugbear
  "C4",     # flake8-comprehensions
  "E",      # pycodestyle (Errors)
  "D",      # pydocstyle
  "ERA",    # eradicate
  "F",      # pyflakes
  "FBT",    # flake8-boolean-trap
  "INP",    # flake8-no-pep420
  "ISC",    # flake8-implicit-str-concat
  "NPY",    # NumPy-specific rules
  "PD",     # pandas-vet
  "PT",     # flake8-pytest-style
  "Q",      # flake8-quotes
  "UP",     # pyupgrade
  "W",      # pycodestyle (Warnings)
]

# Rules NOT to enforce. Either we don't care about them,
# or we do care but we need to fix them before we can enable
# the rule again.
ignore = [
  #####
  # Temporarily-disabled rules.
  # Fix these issues and un-ignore these rules as soon as feasible.
  #####
  "D101",   # missing docstring in public class
  "D102",   # missing docstring in public method
  # (add others here if/as needed)

  #####
  # Rules we really want to disable (now and maybe forever).
  #####
  # This rule doesn't play well with numpy/riptable. In particular,
  # if someone tries to invert a logical/boolean array by e.g. (my_arr == False)
  # instead of `np.logical_not()`, the pattern is detected by this rule
  # and converted to an "is"-based check that won't work with numpy/riptable arrays.
  "E712",   # Comparison to `False` should be `cond is False`
]

# Group output by file. This format is typically most useful for development;
# override the format via the command-line when running `ruff` from within a CI job.
format = "grouped"

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.pydocstyle]
# Use numpy-style docstrings.
convention = "numpy"
